type Proposal = record {
  description: text;
  approve: nat32;
  reject: nat32;
  pass: nat32;
  is_active: bool;
  voted: vec principal;
  owner: principal;
};

type ProposalPayload = record {
  description: text;
  is_active: bool;
};

type Choice = variant {
  Approve;
  Reject;
  Pass;
};

type VoteError = variant {
  AlreadyVoted;
  ProposalIsNotActive;
  InvalidChoice;
  NoSuchProposal;
  AccessRejected;
  UpdateError;
};

type Result = variant {
  Ok;
  Err: VoteError;
};

service: {
  "get_proposal_count": () -> (nat64) query;
  "create_proposal": (nat64, ProposalPayload) -> (opt Proposal);
  "edit_proposal": (nat64, ProposalPayload) -> (Result);
  "end_proposal": (nat64) -> (Result);
  "vote": (nat64, Choice) -> (Result);
};
